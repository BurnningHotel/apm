</br>

<link href="/css/ngrinder.css" rel="stylesheet"/>
<#include "/common/ngrinder_macros.htm"/>
<#import "/common/spring.htm" as spring/>
<#include "/perftest/host_modal.htm">

<script type="text/javascript">
		setAjaxContextPath("");
		//common validation function and options.
		$.validator.addMethod('positiveNumber',
				function (value) {
					return Number(value) > 0;
				}, 'Please enter the positive number.');
		$.validator.addMethod('countNumber',
				function (value) {
					return Number(value) >= 0;
				}, 'common.form.validate.countNumber');

		$.extend(jQuery.validator.messages, {
			required: "This option can't be empty.",
			digits: "Please enter only digits.",
			range: $.validator.format("Please enter a value between {0} and {1}."),
			max: $.validator.format("Please enter a value smaller than or equal to {0}."),
			min: $.validator.format("Please enter a value greater than or equal to {0}."),
			maxlength: $.validator.format("Please enter characters no logger than {0}."),
			rangelength: $.validator.format("Please enter a value between {0} and {1} characters.")
		});

	</script>

<link href="/css/slider.css" rel="stylesheet">
<link href="/plugins/select2/select2.css" rel="stylesheet"/>


<style>
    i.expand {
    background: url('/img/icon_expand.png') no-repeat;
    display: inline-block;
    height: 16px;
    width: 16px;
    line-height: 16px;
    vertical-align: text-top;
    }

    i.collapse{
    background: url('/img/icon_collapse.png') no-repeat;
    display: inline-block;
    height: 16px;
    width: 16px;
    line-height: 16px;
    vertical-align: text-top;
    }

    div.div-resources {
        border: 1px solid #D6D6D6;
        height: 40px;
        margin-bottom: 8px;
        overflow-y: scroll;
        border-radius: 3px 3px 3px 3px;
    }

    div.div-resources .resource {
        width: 300px;
        color: #666666;
        display: block;
        margin-left: 7px;
        margin-top: 2px;
        margin-bottom: 2px;
    }

    div.div-host {
    border: 1px solid #D6D6D6;
    height: 50px;
    margin-bottom: 8px;
    overflow-y: scroll;
    border-radius: 3px 3px 3px 3px;
    }

    div.div-host .host {
    color: #666666;
    display: inline-block;
    margin-left: 7px;
    margin-top: 2px;
    margin-bottom: 2px;
    }

    .add-host-btn {
    margin-right:20px;
    margin-top:-32px;
    }

    .select-item {
    width: 60px;
    }
    .select{
    height:30px;
    *margin-top:4px;
    line-height:30px;
    }


</style>


<#import "../common/spring.htm" as spring/>
<#include "../common/ngrinder_macros.htm"/>
<div class="row">
            <div class="col-md-6">
                <fieldset>
                    <legend><span><@spring.message "perfTest.config.basicConfiguration"/></span></legend>
                </fieldset>
                <form class="form-horizontal" id="test_config_form" name="test_config_form" action="/project/${test.api.project.id}/api/${test.api.id}/config"  method="POST">

                    <div class="row">
                        <div class="col-md-8">
                                <@form_group name="agentCount" label_message_key="perfTest.config.agent" lable_extra_class="col-md-4" controls_extra_class="col-md-8"
                                inline_help="${clustered?string}" err_style="height:20px" >
                                    <@input_group name="agentCount"
                                    value="${test.agentCount}" input_group_class="col-md-8"
                                    message="perfTest.config.agent"
                                    append_prefix="perfTest.config.max" append='<span id="maxAgentCount"></span>' />
                                </@form_group>
                        </div>
                        <div class="col-md-4">
                            <#if clustered == true>
                                <@form_group name="region" label_message_key="perfTest.config.region"
                                label_help_message_key="perfTest.config.region"
                                label_style="margin-left:-50px;width:80px"
                                err_style="margin-left: -140px;width: 170px;display:inline-block;margin-top:6px;
                                height:20px">
                                <select id="region" name="region" class="pull-right required" style="width: 110px">
                                    <option value=""></option>
                                    <#list regions as each>
                                        <option value="${each}" <#if (test.region?? && test.region == each)>selected</#if> >
                                        <@spring.message "${each}"/>
                                        </option>
                                    </#list>
                                </select>
                            </@form_group>
                            </#if>
                        </div>
                    </div>
                    <@form_group  name="vuserPerAgent" label_message_key="perfTest.config.vuserPerAgent" lable_extra_class="col-md-3" controls_extra_class="col-md-9 form-inline">
                            <@input_group name="vuserPerAgent" input_group_class="col-md-6"
                            value="${(test.vuserPerAgent)!1}"
                            message="perfTest.config.vuserPerAgent"
                            append_prefix="perfTest.config.max" append="${maxVuserPerAgent!0}" />
                            <i class="pointer-cursor expand" id="expand_collapse_btn"></i>
                            <div class="pull-right" col-md-2>
                                        <span class="badge badge-info pull-right"
                                              style="padding:7px 20px 7px 20px;-webkit-border-radius:20px;border-radius:20px;-moz-border-radius:20px">
                                            <span id="vuser_label"><@spring.message "perfTest.config.availVuser"/></span>
                                            <span id="total_vuser"></span>
                                        </span>
                            </div>
                            <div id="process_thread_config_panel" style="display: none;margin-top:5px">
                                <@input_prepend name="processes" value="${test.processes}" message="perfTest.config.process"
                                extra_css="col-md-4" />
                                <@input_prepend name="threads" value="${test.threads}" message="perfTest.config.thread"
                                extra_css="col-md-4" />
                            </div>
                    </@form_group>


                    <@form_group group_id="script_control" name="scriptName" label_message_key="perfTest.config.script" lable_extra_class="col-md-3" controls_extra_class="col-md-9 form-inline">
                        <select id="script_name" class="form-control required" name="scriptName" style="width: 275px"
                                old_script="<#if quickScript??>${quickScript}<#else>${(test.scriptName)!}</#if>" ></select>
                        <input type="hidden" id="script_revision"
                               name="scriptRevision"
                               value="${(test.scriptRevision)!-1}"
                               old_revision="${(test.scriptRevision)!-1}"/>
                        <button class="btn btn-xs btn-info pull-right" type="button"
                                id="show_script_btn"
                                style="margin-top: 8px; display: none;">R
                            <#if test.scriptRevision != -1>
                                ${test.scriptRevision}
                                <#else>
                                    <#if quickScriptRevision??>${quickScriptRevision}<#else>HEAD</#if>
                            </#if>
                        </button>
                    </@form_group>

                    <@form_group label_message_key="perfTest.config.scriptResources" lable_extra_class="col-md-3" controls_extra_class="col-md-9">
                        <div class="div-resources" id="script_resources"></div>
                    </@form_group>

                        <#assign targetHosts = test.targetHosts>

                            <@form_group label_message_key="perfTest.config.targetHost" lable_extra_class="col-md-3" controls_extra_class="col-md-9">
                            <#include "/test/host.htm">
                            </@form_group>

                            <#assign enableFixedRate><#if test.useFixedRateRPS == true >checked</#if></#assign>
                            <@control_group_with_checkbox label_message_key="perfTest.config.enableFixedRate" lable_extra_class="col-md-4" controls_extra_class="col-md-2"
                            input_id="enable_fixed_rate_rps" input_name="useFixedRateRPS"  checkbox_checked="${enableFixedRate}"
                            name="fixedRateRps">
                            <@input_group  name="rps"
                            value="${test.rps}"
                            message="perfTest.config.rps"/>
                        </@control_group_with_checkbox>

                        <hr>

                        <#assign duration_checked><#if test.threshold == "D">checked</#if></#assign>

                        <@control_group_with_radio label_message_key="perfTest.config.duration" lable_extra_class="col-md-3" controls_extra_class="col-md-9"
                        input_id="duration_ratio" input_name="threshold" input_value="D" radio_checked="${duration_checked}" >
                        <select class="select-item" id="select_hour"></select> :
                        <select class="select-item" id="select_min"></select> :
                        <select	class="select-item" id="select_sec"></select> &nbsp;&nbsp;
                        <code>HH:MM:SS</code>
                        <input type="hidden" id="duration" name="duration" value="${test.duration?c}"/>
                        <input type="hidden" id="duration_hour" name="durationHour" value="0"/>
                        <div id="duration_slider" class="slider" style="margin-left: 0; width: 255px"></div>
                        <input id="hidden_duration_input" class="hide" data-step="1"/>
                        </@control_group_with_radio>

                        <#assign count_checked><#if test.threshold == "R">checked</#if></#assign>

                        <@control_group_with_radio label_message_key="perfTest.config.runCount" lable_extra_class="col-md-3" controls_extra_class="col-md-4"
                        input_id="run_count_radio" input_name="threshold" input_value="R" radio_checked="${count_checked}"
                        name="runCount">
                        <@input_group  name="runCount"
                        value="${test.runCount}"
                        message="perfTest.config.runCount"
                        others='number_limit="${maxRunCount}"'
                        append_prefix="perfTest.config.max" append="${maxRunCount}" />
                        </@control_group_with_radio>

                        <div class="row accordion-heading" style="margin-top:-20px">
                                        <span class="pull-right">
                                            <a id="detail_config_section_btn" class="pointer-cursor">
                                                <@spring.message "perfTest.config.showAdvancedConfig"/>
                                            </a>
                                        </span>
                        </div>
                    <div id="detail_config_section" style='display:none' >
                    <div class="row">
                                <div class="col-md-6">
                                    <@form_group name="samplingInterval" label_message_key="perfTest.config.samplingInterval" lable_extra_class="col-md-6" controls_extra_class="col-md-6">
                                    <#assign samplingIntervalArray = [1,2,3,4,5,10,30,60]>
                                        <select class="select-item" id="sampling_interval" name="samplingInterval">
                                            <#list samplingIntervalArray as eachInterval>
                                                <option value="${eachInterval}"
                                                <#if test.samplingInterval != 0>
                                                    <#if eachInterval == test.samplingInterval> selected="selected" </#if>
                                                    <#else>
                                                        <#if eachInterval == 2>
                                                            selected="selected"
                                                        </#if>
                                                </#if> >
                                                ${eachInterval}
                                                </option>
                                            </#list>
                                        </select>
                                    </@form_group>
                                </div>
                                <div class="col-md-6">
                                    <@form_group name="ignoreSampleCount" label_message_key="perfTest.config.ignoreSampleCount" lable_extra_class="col-md-6" controls_extra_class="col-md-6"
                                    label_style="width:150px;margin-left:-20px"
                                    err_style="margin-left:-140px"
                                    >
                                    <@input_popover name="ignoreSampleCount"
                                    value="${test.ignoreSampleCount}"
                                    message="perfTest.config.ignoreSampleCount"
                                    extra_css="input-mini" />
                                </@form_group>
                            </div>
                </div>

            <div class="row">
                <div class="col-md-6">
                    <@form_group name="safeDistribution" label_message_key="perfTest.config.safeDistribution"
                    label_help_message_key="perfTest.config.safeDistribution" lable_extra_class="col-md-6" controls_extra_class="col-md-6">
                    <input type="checkbox" id="safe_distribution" name="safeDistribution"
                    <#if test.safeDistribution>checked<#else><#if safeFileDistribution!false>checked</#if> </#if> />
                </@form_group>
                 </div>
                <div class="col-md-6">
                    <@form_group name="param" label_message_key="perfTest.config.param" lable_extra_class="col-md-6" controls_extra_class="col-md-6"
                    label_style="width:70px;margin-left:-20px"
                    err_style="margin-left:-90px"
                    controls_style="margin-left:70px">
                    <@input_popover name="param"
                    value="${(test.param?html)}"
                    message="perfTest.config.param"
                    others='style="width:120px"'/>
                    </@form_group>
                </div>
             </div>
            </div>
        </form>
    </div>
    <!-- end test content left -->

    <div class="col-md-6">
        <fieldset>
            <legend>
                    <span>
                        <input type="checkbox" id="use_ramp_up" name="useRampUp" style="vertical-align: middle; margin-bottom:5px"
                        <#if test.useRampUp == true>checked</#if>/>
                        <@spring.message "perfTest.config.rampUp.enable"/>
                    </span>
                    <span  class="pull-right">
                        <select id="ramp_up_type" class="span2" name="rampUpType">
                            <#list availRampUpType  as each>
                                <option value="${each}" <#if test?? && test.rampUpType ?? && test.rampUpType == each>selected</#if>><@spring.message "perfTest.config.rampUp.${each.messageKey}"/></option>
                            </#list>
                        </select>
                    </span>
            </legend>
        </fieldset>

        <div class="form-horizontal">
            <div class="form-group">
                <div class="row">
                    <div class="col-md-6">
                        <@input_label name="rampUpInitCount"
                        value="${test.rampUpInitCount}" message="perfTest.config.rampUp.initialCount"
                        err_style="margin-left:-125px; width:220px; height:10px"/>
                    </div>

                    <div class="col-md-6">
                        <@input_label name="rampUpStep"
                        value="${test.rampUpStep}" message="perfTest.config.rampUp.step"
                        err_style="margin-left:-125px; width:220px; height:10px"/>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-6">
                        <@input_label name="rampUpInitSleepTime"
                        value="${test.rampUpInitSleepTime}"
                        message="perfTest.config.rampUp.initialSleepTime" others="<code>MS</code>"
                        err_style="margin-left:-125px; width:220px; height:10px"/>
                    </div>
                    <div class="col-md-6">
                        <@input_label name="rampUpIncrementInterval"
                        value="${test.rampUpIncrementInterval?c}"
                        message="perfTest.config.rampUp.incrementInterval" others="<code>MS</code>"
                        err_style="margin-left:-125px; width:220px; height:10px"/>
                    </div>
                </div>
            </div>
        </div>

        <legend class="center" style="margin-top:0;padding-top:0"> <@spring.message "perfTest.config.rampUp.des"/> </legend>
        <div id="ramp_up_chart" class="ramp_up_chart" style="margin-left: 20px"></div>
    </div>
    <!-- end test content right -->

</div>
<hr>
<div class="row">
            <div class="col-md-3">
                <div class="form-group">
                    <button type="submit" class="btn btn-success" id="save_test_btn" style="" >
                        Save										</button>

                </div>
            </div>

</div>


<script type="text/javascript">
		//noinspection JSDuplicatedDeclaration
	var curLang = "en";
	var msgTimeout;
	$(document).ready(function () {
		$("#error_msg_div_btn").click(function () {
			var $div = $("#error_msg_div");
			$div.fadeOut(100);
			//noinspection JSValidateTypes
			$div.children("span").html("");
		});
	});

	function showMsg(color, message) {
		var $msgDiv = $('#message_div');
		$msgDiv.hide();
		$msgDiv.addClass(color);
		$msgDiv.html(message);
		$msgDiv.fadeIn(100);
		clearTimeout(msgTimeout);
		msgTimeout = setTimeout(function () {
			$msgDiv.fadeOut(100);
			$msgDiv.removeClass(color);
		}, 3000);
	}

	function hideMsg() {
		if ($('#message_div:visible')[0]) {
			clearTimeout(msgTimeout);
			var $msgDiv = $('#message_div');
			$msgDiv.fadeOut(100);
			$msgDiv.removeClass("alert-success alert-info alert-block");
		}
	}

	function showSuccessMsg(message) {
		showMsg("alert-success", message);
	}

	function showInformation(message) {
		showMsg("alert-info", message);
	}

	function showWarning(message) {
		showMsg("alert-block", message);
	}

	var $errorMsgDiv = $("#error_msg_div");
	function showErrorMsg(message) {
		$errorMsgDiv.hide();
		//noinspection JSValidateTypes
		$errorMsgDiv.children("span").html(message);
		$errorMsgDiv.fadeIn(100);
	}

	var $progressbar = $("#progress_bar_div");
	function showProgressBar(msg) {
		//noinspection JSValidateTypes
		$progressbar.children("div").text(msg);
		$progressbar.fadeIn(500);
	}

	function hideProgressBar() {
		$progressbar.fadeOut(500);
		//noinspection JSValidateTypes
		$progressbar.children("div").text("");
	}
</script>


<script>
// vuser calc
function getProcessCount(total) {
	if (total < 2) {
		return 1;
	}

	var processCount = 2;

	if (total > 80) {
		processCount = parseInt(total / 40) + 1;
	}

	if (processCount > 10) {
		processCount = 10;
	}
	return processCount;
}

function getThreadCount(total) {
	var processCount = getProcessCount(total);
	return parseInt(total / processCount);
}
;

var objTimer;
var durationMap = [];

var agentCountMap = {};
<#list regionAgentCountMap?keys as key>
agentCountMap["${key}"] = ${regionAgentCountMap[key]};
</#list>

$(document).ready(function () {
	$.ajaxSetup({
		cache : false //close AJAX cache
	});

	initDuration();
	initScheduleDate();
	$("#sample_tab").find("a:first").tab('show');
	$("#test_config_section_tab").find("a").tab('show');

    addValidation();
	bindEvent();
	updateScript();
	updateTotalVuser();
	updateRampUpChart();
	//displayConfigOnly();

});


function initScheduleDate() {
	var date = getBrowserTimeApplyingTimezone();
	var year = date.getFullYear();
	var month = date.getMonth() + 1;
	var day = date.getDate();
	$("#scheduled_date").val(year + "-" + (month < 10 ? "0" + month : month) + "-" + (day < 10 ? "0" + day : day));

	$('#scheduled_date').datepicker({
		format : 'yyyy-mm-dd'
	});

	$("#scheduled_hour").append(getOption(24));
	$("#scheduled_min").append(getOption(60));
}

function initDuration() {
	var sliderMax = 1000;
	durationMap[0] = 0;

	for ( var i = 1; i <= sliderMax; i++) {
		if (i <= 10) {
			durationMap[i] = durationMap[i - 1] + 1;
		} else if (i <= 20) {
			durationMap[i] = durationMap[i - 1] + 5;
		} else if (i <= 32) { //until 180 min
			durationMap[i] = durationMap[i - 1] + 10;
		} else if (i <= 38) { //360 min
			durationMap[i] = durationMap[i - 1] + 30;
		} else if (i <= 56) { //24 hours
			durationMap[i] = durationMap[i - 1] + 60;
		} else if (i <= 72) {
			durationMap[i] = durationMap[i - 1] + 60 * 6;
		} else if (i <= 78) {
			durationMap[i] = durationMap[i - 1] + 60 * 12;
		} else {
			durationMap[i] = durationMap[i - 1] + 60 * 24;
		}
		if ((durationMap[i]/60) >= 8) {
			 sliderMax = i;
			 durationMap[i] = (8 - 1) * 60;
			 break;
		}
	}

	var durationVal = $("#duration").val();
    var $hiddenDurationInput = $("#hidden_duration_input");
    $hiddenDurationInput.attr("data-slider", "#duration_slider");
	for (i = 0; i <= sliderMax; i++) {
		if (durationMap[i] * 60000 >= durationVal) {
			$hiddenDurationInput.attr("value", i);
			break;
		}
		if (i == sliderMax) {
			$hiddenDurationInput.attr("value", sliderMax);
		}
	}
	$hiddenDurationInput.slider(
			{
				max:sliderMax,
				min:1,
				template:
					"<div class='input-slider' style='width:255px'>" +
					"<div class='input-slider-knob js-slider-knob'></div>" +
					"</div>"
			});

	var durationHour = parseInt(durationVal / 3600000) + 1;
	var durationMaxHour = durationHour > 8 ? durationHour : 8;
    var $selectHour = $("#select_hour");
    var $selectSec = $("#select_sec");
    var $selectMin = $("#select_min");
    $selectHour.append(getOption(durationMaxHour));
    $selectHour.change(getDurationMS);
    $selectMin.append(getOption(60));
	$selectMin.change(getDurationMS);
    $selectSec.append(getOption(60));
	$selectSec.change(getDurationMS);
	setDuration();
	setDurationHour(durationVal);
}

var validationOptions = {};
function addValidation() {
	$.validator.addMethod("paramFmt", function (param) {
		var rule = /^[a-zA-Z0-9_\.,\|=]{0,50}$/;
		return rule.test($.trim(param));
	});
	var $runCountRadio = $("#run_count_radio");
	$.validator.addMethod("runCount", function(value, element) {
		if ($runCountRadio.is(":checked")) {
			return value > 0;
		} else {
			return true;
		}
	});
    //noinspection JSUnusedLocalSymbols,JSUnusedLocalSymbols
    validationOptions = {
		rules: {
			testName: {
				required: true
			},
			agentCount: {
				required: true,
				digits: true,
				min: 0
			},
			vuserPerAgent: {
				required: true,
				digits: true,
				range: [1, 2]
			},
			scriptName: {
				required: true
			},
			durationHour: {
				max: 8
			},
			ignoreSampleCount: {
				required: false,
				digits: true,
				min: 0
			},
			initProcesses: {
				required: true,
				digits: true
			},
			initSleepTime: {
				required: true,
				digits: true
			},
			processIncrement: {
				required: true,
				digits: true,
				min: 1
			},
			processIncrementInterval: {
				required: true,
				digits: true,
				min: 1
			},
			runCount: {
				digits: true,
				max: 10000,
				runCount: true
			},
			param : {
				required:false,
				paramFmt:true
			}
		},
		messages: {
			testName: {
				required: "Enter the valid test name."
			},
			agentCount: {
				required: "Enter the valid test agent count."
			},
			vuserPerAgent: {
				required: "Enter the valid vuser count."
			},
			scriptName: {
				required: "A script is required."
			},
			durationHour: {
				max: "Duration can not be set more than {0} hours."
			},
			runCount: {
				required: "Enter the valid run count.",
				runCount: "Enter the valid run count."
			},
			processes: {
				required: "Enter the valid process count."
			},
			threads: {
				required: "Enter the valid thread count."
			},
			targetHosts: {
				required: "Enter the test target host.<br/> If you don't know what it is, please refer to <a href='http://www.cubrid.org/wiki_ngrinder/entry/script-security' target='_blank'><u>there</u></a>"
			},
			param : {
				paramFmt: "Please input the valid parameter."
			}

		},
		ignore : "", // make the validation on hidden input work
		errorClass : "help-inline",
		errorElement : "span",
		errorPlacement : function(error, element) {
			var errorPlace = $("td." + element.attr("id"));
			if (errorPlace[0]) {
				errorPlace.html(error);
				return;
			}
			errorPlace = $("#err_"+element.attr("id"));
			if (errorPlace[0]) {
				errorPlace.html(error);
			} else {
				var $elem = element.closest(".controls");
				if ($elem[0]) {
					$elem.append(error);
				} else {
					element.parent().append(error);
				}
			}
		},
		highlight : function(element, errorClass, validClass) {
			var $detailedSection = $(element).parents("#detail_config_section");
			if ($detailedSection.length >= 1) {
				$detailedSection.show();
			}
			var $controlGroup = $(element).parents('.control-group');
			if ($controlGroup.length >= 1) {
				$($controlGroup[0]).removeClass("success");
				$($controlGroup[0]).addClass("error");
			}
		},
		unhighlight : function(element, errorClass, validClass) {
			var $elem = $(element);
			var $controlGroup = $elem.parents('.control-group');
			if ($controlGroup.length >= 1) {
				var isSuccess = true;
				$elem.siblings("span.help-inline:visible").each(function() {
					if ($(this).attr("for") != $elem.attr("id")) {
						isSuccess = false;
					}
				});
				if (isSuccess) {
					$($controlGroup[0]).removeClass("error");
					$($controlGroup[0]).addClass("success");
				}
			}
		}
	};

	$("#test_config_form").validate(validationOptions);
}

function bindNewScript(target, first) {
    console.info("script list:"+target);
	var $showScript = $("#show_script_btn");
	var $scriptRevision = $("#script_revision");
	var oldRevision = $scriptRevision.attr("old_revision");
	//if (target.val() == target.attr("old_script") && oldRevision != -1) {
	//	$showScript.text("R " + oldRevision);
	//	$scriptRevision.val(oldRevision);
	//} else {
		$showScript.text("R HEAD");
		$scriptRevision.val(-1);
	//}
	$showScript.show();
	//updateScriptResources(first);
	if (target.val() != "") {
		target.valid();
	}
}

function showScheduleModal() {
	initScheduleTime();
	$("#tag_string").val(buildTagString());
	$('#schedule_modal').modal('show');
}


function getBrowserTimeApplyingTimezone(time) {
	var date = new Date();
	if (time === undefined) {
		return new Date(date.getTime() + (date.getTimezoneOffset() * 60 * 1000) + 28800000);
	} else {
		date = new Date(time - 28800000);
		// Now it's browser time reflecting the timezone difference.
		return new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes()));
	}
}


function bindEvent() {
console.info("bind event");
	$("#script_name").change(function() {
		bindNewScript($(this), false);
	});

	$("#hidden_duration_input").bind("slide", function() {
		var maxIndex = durationMap.length - 1;
		var $duration = $("#duration");
		if (maxIndex == this.value) {
			$duration.val((durationMap[maxIndex] + 59) * 60000 + 59000);
		} else {
			$duration.val(durationMap[this.value] * 60000);
		}
		setDuration();
		$("#duration_ratio").click();
	});

	$("#detail_config_section_btn").click(function() {
		if ($("#detail_config_section").is(":hidden")) {
			$("#detail_config_section").show("slow");
		} else {
			$("#detail_config_section").slideUp();
		}
	});

	$("#save_schedule_btn").click(function() {
		$("#agent_count").rules("add", {
			min:1
		});
		if (!validateForm()) {
			return false;
		}
		//noinspection JSUnresolvedVariable
        if (typeof(scheduleTestHook) != "undefined") {
			//noinspection JSUnresolvedFunction
            if (scheduleTestHook()) {
				showScheduleModal();
			}
		} else { //noinspection JSUnresolvedVariable
            if (typeof(scheduleTestUnBlockingHook) != "undefined") {
	            //noinspection JSUnresolvedFunction
                scheduleTestUnBlockingHook(showScheduleModal);
            } else {
	            showScheduleModal();
            }
        }
		return true;
	});


	$("#save_test_btn").click(function() {
		$("#agent_count").rules("add", {
			min:0
		});

		if (!validateForm()) {
			return false;
		}

		$("#scheduled_time").attr('name', '');
		//$("#tag_string").val(buildTagString());

        document.test_config_form.submit();
		//return true;
	});

	//$("#add_schedule_btn").click(function() {
    //    var $scheduleModal = $("#schedule_modal");
     //   if (checkEmptyByID("scheduled_date")) {
	//		$scheduleModal.find(".control-group").addClass("error");
	//		$scheduleModal.find(".help-inline").html("Please select date before schedule.");
	//		return;
	//	}

	//	var timeStr = $("#scheduled_date").val() + " " + $("#scheduled_hour").val() + ":" + $("#scheduled_min").val() + ":0";
		// User input date time.
	//	var scheduledTime = new Date(timeStr.replace(/-/g, "/"));
	//	scheduledTime = getBrowserTimeApplyingTimezone(scheduledTime.getTime());
    //    if (new Date() > scheduledTime) {
	//		$scheduleModal.find(".control-group").addClass("error");
	//		$scheduleModal.find(".help-inline").html("Scheduled time should be future.");
	//		return;
	//	}
	//	$scheduleModal.find(".control-group").removeClass("error");
	//	$("#scheduled_time").val(scheduledTime);
    //    $scheduleModal.modal("hide");
	//	$scheduleModal.find("small").html("");

	//	document.test_config_form.submit();
	//});

	$("#run_count_radio").click(function() {
		if ($(this).attr("checked") == "checked") {
			var $runCount = $("#run_count");
			$runCount.rules("add", {
				min:1
			});
			$runCount.valid();

			var $durationHour = $("#duration_hour");
			if (!$durationHour.valid()) {
                var maxVal = 3600000 * 8;
                $("#duration").val(maxVal);
                setDuration();
                //noinspection JSUnusedAssignment
                setDurationHour(maxVal);
			}
			$durationHour.valid();
		}
	});

	$("#duration_ratio").click(function() {
		if ($(this).attr("checked") == "checked") {
            var $duration = $("#duration");
            setDurationHour($duration.val());
			$("#duration_hour").valid();
			$duration.addClass("positiveNumber");
			$duration.valid();

			var $runCount = $("#run_count");
			$runCount.rules("add", {
				min:0
			});
			if (!$runCount.valid()) {
				$runCount.val(0);
			}
			$runCount.valid();
		}
	});

	$("#ignore_sample_count, #run_count").blur(function() {
		if (!($.trim($(this).val()))) {
			$(this).val(0);
		}
	});

	$("#agent_count").change(function() {
		updateTotalVuser();
	});

	$("#threads, #processes").change(function() {
		var $vuser = $("#vuser_per_agent");
		$vuser.val($("#processes").val() * $("#threads").val());
		if ($vuser.valid()) {
			updateVuserGraph();
			updateTotalVuser();
		}
	});

	$("#vuser_per_agent").change(function() {
		var $vuserElement = $(this);
		var processCount = $("#processes").val();
		if ($vuserElement.valid()) {
			var result = updateVuserPolicy($vuserElement.val());
			$(this).val(result[0] * result[1]);
			if (processCount != result[0]) {
				updateVuserGraph();
			}
			updateTotalVuser();
		}
	});



	$("#sample_tab").find("a").click(function(e) {
		e.preventDefault();
		$(this).tab('show');
	});

	$("#show_script_btn").click(function() {
		var currentScript = $("#script_name").val();
		if (currentScript) {
			//noinspection JSUnusedAssignment
            var ownerId = "";
			var scriptRevision = $("#script_revision").val();
			var openedWindow = window.open("/script/detail/" + currentScript + "?r=" + scriptRevision + ownerId, "_blank");
			openedWindow.focus();
		}
	});

	$("#expand_collapse_btn").click(function() {
		$(this).toggleClass("collapse");
		var $panel = $("#process_thread_config_panel");
		if ($panel.is(":hidden")) {
			$panel.show("slow");
		} else {
			$panel.slideUp();
		}
	});

	$("#select_hour, #select_min, #select_sec").change(function() {
		$("#duration_ratio").click();
	});

	$("#run_count").focus(function() {
		$("#run_count_radio").click();
	});

	$(document).ajaxSend(function(e, xhr, settings) {
		var url = settings.url;
		if ((url.indexOf("resource") > 0 || url.indexOf("script") > 0)) {
			showProgressBar("Updating script resources...");
		}
	});

    <#if clustered>
	var $region = $("#region");
	$region.select2();
	$region.change(function(){
		changeAgentMaxCount($(this).val(), true);
	});
	    changeAgentMaxCount($region.val(), false);
    <#else>
	    changeAgentMaxCount("NONE", false);
</#if>
}


function changeAgentMaxCount(region, isValid) {
	var count = agentCountMap[region];
	if (count === undefined) {
		count = 0;
	}
	$("#maxAgentCount").text(count);

	//var $agentCountObj = $("#agent_count");
	//$agentCountObj.rules("add", {
	//	max: count
	//});

	//if (isValid) {
	//	$agentCountObj.valid();
	//}
}

function validateForm() {
	var result = $("#test_config_form").valid();
	if (!result) {
		$("#test_config_section_tab").find("a").tab('show');
	}
	return result;
}

function buildTagString() {
	return $.map($("#tag_string").select2("data"), function(obj) {
		return obj.text;
	}).join(",");
}

function updateTotalVuser() {
	$("#total_vuser").text($("#agent_count").val() * $("#vuser_per_agent").val());
}

function updateScript() {
	var ajaxObj = new AjaxObj("/script/api/list", null, "There is an unexpected error. check logs.");
	ajaxObj.params = {
	};
	ajaxObj.success = function(res) {
		var $scriptSelection = $("#script_name");
		var selectedScript = $scriptSelection.attr("old_script");
		var exists = false;
		console.log("selected script:"+selectedScript);
		for (var i = 0; i < res.length; i++) {
			if (selectedScript == res[i].path) {
				exists = true;
			}
			$scriptSelection.append($("<option value='" + res[i].path + "' revision='" + res[i].revision + "' validated='" + res[i].validated + "'>" + res[i].pathInShort + "</option>"));
		}

		if (exists) {

			$scriptSelection.val(selectedScript).trigger("change");
		} else if (selectedScript) {
			$scriptSelection.append($("<option value='' revision='-1' validated='false'>(deleted)" + selectedScript +"</option>"));
			$scriptSelection.select2("val", "");
		} else {
			$scriptSelection.append($("<option value='' revision='-1' validated='false'>" + selectedScript +"</option>"));
			$scriptSelection.select2("val", "");
		}

		bindNewScript($scriptSelection, true);
	};
	ajaxObj.complete = function() {
		hideProgressBar();
	};

	ajaxObj.call();
}

function updateScriptResources(first) {
	var scriptName = $("#script_name").val();
	if (!scriptName) {
		return;
	}

	var ajaxObj = new AjaxObj("/script/api/resource", null, "There is an unexpected error. check logs.");
	ajaxObj.params = {
		'scriptPath' : scriptName,
		'r' : $("#script_revision").val()
	};
	ajaxObj.success = function(res) {
		var html = "";
		var len = res.resources.length;
		if (first == false) {
			initHosts(res.targetHosts);
		}
		for ( var i = 0; i < len; i++) {
			var value = res.resources[i];
			html = html + "<div class='resource ellipsis' title='" + value + "'>" + value + "</div>";
		}
		$("#script_resources").html(html);
	};
	ajaxObj.complete = function() {
		hideProgressBar();
	};
	ajaxObj.call();
}

function updateVuserPolicy(vuser) {
	var processCount = getProcessCount(vuser);
	var threadCount = getThreadCount(vuser);
	var $processes = $('#processes');
	$processes.val(processCount);
	$processes.valid();
	var threads = $('#threads');
	threads.val(threadCount);
	threads.valid();
	return [ processCount, threadCount ];
}

function updateVuserGraph() {
	//if ramp-up chart is not enabled, update init process count as total
	if ($("#use_ramp_up")[0].checked) {
		updateRampUpChart();
	}
}

function setDuration() {
	var duration = $("#duration").val();
	var durationInSec = parseInt(duration / 1000);
	var durationH = parseInt(durationInSec / 3600);
	var durationM = parseInt((durationInSec % 3600) / 60);
	var durationS = durationInSec % 60;

	$("#select_hour").val(durationH);
	$("#select_min").val(durationM);
	$("#select_sec").val(durationS);
}

function getDurationMS() {
	var durationH = parseInt($("#select_hour").val());
	var durationM = parseInt($("#select_min").val());
	var durationS = parseInt($("#select_sec").val());
	var durationMs = (durationS + durationM * 60 + durationH * 3600) * 1000;
	var $durationObj = $("#duration");
	$durationObj.val(durationMs);
	$durationObj.valid(); //trigger validation
	return durationMs;
}

function getOption(cnt) {
	var contents = [];
	for (var i = 0; i < cnt; i++) {
		contents.push("<option value='" + i + "'>" + (i < 10 && cnt > 9 ? "0" + i : i) + "</option>");
	}
	return contents.join("\n");
}


var finished = false;
var testId = $('#test_id').val();
// Wrap this function in a closure so we don't pollute the namespace
function displayConfigOnly() {
    $("#test_config_section_tab").find("a").tab('show');

}


var samplingInterval = 1;


function initScheduleTime() {
	var date = getBrowserTimeApplyingTimezone();
	$("#scheduled_hour").val(date.getHours());
	$("#scheduled_min").val(date.getMinutes());
}

function setDurationHour(durationVal) {
	var durationHour = parseInt(durationVal / 3600000);
	durationHour = durationVal % 3600000 == 0 ? durationHour : durationHour + 1;
	$("#duration_hour").val(durationHour);
}
</script>


