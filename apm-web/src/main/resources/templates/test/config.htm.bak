<#import "../common/spring.htm" as spring/>
<#include "../common/ngrinder_macros.htm"/>

<link href="../css/slider.css" rel="stylesheet"/>
<link href="../plugins/datepicker/css/datepicker.css" rel="stylesheet"/>
<#include "../common/common.htm"/>
<#include "../common/jqplot.htm"/>


<#assign security=JspTaglibs["http://www.springframework.org/security/tags"] />
<style>
    div.div-resources {
    border: 1px solid #D6D6D6;
    height: 40px;
    margin-bottom: 8px;
    overflow-y: scroll;
    border-radius: 3px 3px 3px 3px;
    }

    div.div-resources .resource {
    width: 300px;
    color: #666666;
    display: block;
    margin-left: 7px;
    margin-top: 2px;
    margin-bottom: 2px;
    }

</style>
<div class="row">
    <div class="col-lg-6">
        <fieldset>
            <legend><span><@spring.message "perfTest.config.basicConfiguration"/></span></legend>
        </fieldset>

        <div class="form-horizontal form-horizontal-2">

            <div class="row">
                <div class="col-lg-4">
                    <div class="control-group" id="">
                        <label class="control-label " for="agent_count" style="">
                            Agent </label>

                        <div class="controls " style="">

                            <div class="input-append">

                                <input type="text" class="input input-mini"
                                       rel="popover" id="agent_count" name="agentCount"
                                       value="0" data-html="true"
                                       data-placement='right'
                                       data-content="Please input the count of agent that this test will use."
                                       title='Agent'
                                        />

                                <span class="add-on">
                        Max:			<span id="maxAgentCount"></span>
                                </span>

                            </div>
                            <div id="err_agent_count" class="small-error-box" style="height:20px">
                            </div>
                        </div>
                    </div>
                    <div class="col-lg-2">
                        <#if clustered == true>
                            <@control_group name="region" label_message_key="perfTest.config.region"
                            label_help_message_key="perfTest.config.region"
                            label_style="margin-left:-50px;width:80px"
                            err_style="margin-left: -140px;width: 170px;display:inline-block;margin-top:6px;
                            height:20px">
                            <select id="region" name="region" class="pull-right required" style="width: 110px">
                                <option value=""></option>
                                <#list regions as each>
                                    <option value="${each}">
                                        <#if (config.region?? && config.region == each)>selected</#if>

                                        <@spring.message "${each}"/>
                                    </option>
                                </#list>
                            </select>
                        </@control_group>
                        </#if>
                    </div>
                </div>

                <@control_group name="vuserPerAgent" label_message_key="perfTest.config.vuserPerAgent">
                    <@input_append name="vuserPerAgent"
                    value="${(config.vuserPerAgent)!1}"
                    message="perfTest.config.vuserPerAgent"
                    append_prefix="perfTest.config.max" append="${maxVuserPerAgent!0}" />
                    <i class="pointer-cursor expand" id="expand_collapse_btn"></i>

                    <div class="pull-right">
                            <span class="badge badge-info pull-right"
                                  style="padding:7px 20px 7px 20px;-webkit-border-radius:20px;border-radius:20px;-moz-border-radius:20px">
                                <span id="vuser_label"><@spring.message "perfTest.config.availVuser"/></span>
                                <span id="total_vuser"></span>
                            </span>
                    </div>
                    <div id="process_thread_config_panel" style="display: none;margin-top:5px">
                        <@input_prepend name="processes" value="${config.processes}" message="perfTest.config.process"
                        extra_css="control-group" />
                        <@input_prepend name="threads" value="${config.threads}" message="perfTest.config.thread"
                        extra_css="control-group" />
                    </div>
                </@control_group>

            <@control_group group_id="script_control" name="scriptName" label_message_key="perfTest.config.script">
                <select id="script_name" class="required" name="scriptName" style="width: 275px"
                        old_script="<#if quickScript??>${quickScript}<#else>${(config.scriptName)!}</#if>"></select>
                <input type="hidden" id="script_revision"
                       name="scriptRevision"
                       value="${(config.scriptRevision)!-1}"
                       old_revision="${(config.scriptRevision)!-1}"/>
                <button class="btn btn-mini btn-info pull-right" type="button"
                        id="show_script_btn"
                        style="margin-top: 3px; display: none;">R
                    <#if config.scriptRevision != -1>
                        ${config.scriptRevision}
                        <#else>
                            <#if quickScriptRevision??>${quickScriptRevision}
                                <#else>HEAD
                            </#if>
                    </#if>
                </button>
            </@control_group>

        <@control_group label_message_key="perfTest.config.scriptResources">
            <div class="div-resources" id="script_resources"></div>
        </@control_group>

    <#assign targetHosts = config.targetHosts>
        <@control_group label_message_key="perfTest.config.targetHost">
            <#include "host.htm">
        </@control_group>
        <hr>

        <#assign duration_checked>
            <#if config.threshold == "D">checked</#if>
        </#assign>

        <@control_group_with_radio label_message_key="perfTest.config.duration" controls_extra_class="docs-input-sizes"
        input_id="duration_ratio" input_name="threshold" input_value="D" radio_checked="${duration_checked}" >
            <select class="select-item" id="select_hour"></select> :
            <select class="select-item" id="select_min"></select> :
            <select class="select-item" id="select_sec"></select> &nbsp;&nbsp;
            <code>HH:MM:SS</code>
            <input type="hidden" id="duration" name="duration" value="${config.duration}"/>
            <input type="hidden" id="duration_hour" name="durationHour" value="0"/>

            <div id="duration_slider" class="slider" style="margin-left: 0; width: 255px"></div>
            <input id="hidden_duration_input" class="hide" data-step="1"/>
        </@control_group_with_radio>

    <#assign count_checked>
        <#if config.threshold == "R">checked</#if>
    </#assign>

    <@control_group_with_radio label_message_key="perfTest.config.runCount"
    input_id="run_count_radio" input_name="threshold" input_value="R" radio_checked="${count_checked}"
    name="runCount">
    <@input_append name="runCount"
    value="${config.runCount}"
    message="perfTest.config.runCount"
    others='number_limit="${maxRunCount}"'
    append_prefix="perfTest.config.max" append="${maxRunCount}" />
    </@control_group_with_radio>

<div class="row accordion-heading" style="margin-top:-20px">
                        <span class="pull-right">
                            <a id="detail_config_section_btn" class="pointer-cursor">
                                <@spring.message "perfTest.config.showAdvancedConfig"/>
                            </a>
                        </span>
</div>
<div id="detail_config_section" style='display:none'>
    <div class="row">
        <div class="col-lg-3">
            <@control_group name="samplingInterval" label_message_key="perfTest.config.samplingInterval">
                <#assign samplingIntervalArray = [1,2,3,4,5,10,30,60]>
                    <select class="select-item" id="sampling_interval" name="samplingInterval">
                        <#list samplingIntervalArray as eachInterval>
                            <option value="${eachInterval}"
                            <#if config.samplingInterval != 0>
                                <#if eachInterval == config.samplingInterval> selected="selected"</#if>
                                <#else>
                                    <#if eachInterval == 2>
                                        selected="selected"
                                    </#if>
                            </#if>
                            >
                            ${eachInterval}
                            </option>
                        </#list>
                    </select>
            </@control_group>
        </div>
        <div class="col-lg-3">
            <@control_group name="ignoreSampleCount" label_message_key="perfTest.config.ignoreSampleCount"
            label_style="width:150px;margin-left:-20px"
            err_style="margin-left:-140px"
            >
            <@input_popover name="ignoreSampleCount"
            value="${config.ignoreSampleCount}"
            message="perfTest.config.ignoreSampleCount"
            extra_css="input-mini" />
            </@control_group>
    </div>
</div>

<div class="row">
    <div class="col-lg-3">
        <@control_group name="safeDistribution" label_message_key="perfTest.config.safeDistribution"
        label_help_message_key="perfTest.config.safeDistribution">
            <input type="checkbox" id="safe_distribution" name="safeDistribution"
            <#if config.safeDistribution>checked
                <#else>
                    <#if safeFileDistribution!false>checked</#if>
            </#if>/>
        </@control_group>
</div>
<div class="col-lg-3">
    <@control_group name="param" label_message_key="perfTest.config.param"
    label_style="width:70px;margin-left:-20px"
    err_style="margin-left:-90px"
    controls_style="margin-left:70px">
    <@input_popover name="param"
    value="${(config.param?html)}"
    message="perfTest.config.param"
    others='style="width:120px"'/>
    </@control_group>
</div>

<!-- end test content left -->

<div class="col-lg-6">
    <fieldset>
        <legend>
                <span>
	               	<input type="checkbox" id="use_ramp_up" name="useRampUp"
                           style="vertical-align: middle; margin-bottom:5px"
					<#if config.useRampUp == true>checked</#if> />
					<@spring.message "perfTest.config.rampUp.enable"/>
	            </span>
				<span class="pull-right">
					<select id="ramp_up_type" class="col-lg-2" name="rampUpType">
                        <#list availRampUpType  as each>
                            <option value="${each}"
                            <#if config?? && config.rampUpType ?? && config.rampUpType == each>selected</#if>
                            ><@spring.message "perfTest.config.rampUp.${each.messageKey}"/></option>
                        </#list>
                    </select>
				</span>
        </legend>
    </fieldset>
    <div class="form-horizontal form-horizontal-2">
        <div class="control-group">
            <div class="row">
                <div class="col-lg-3">
                    <@input_label name="rampUpInitCount"
                    value="${config.rampUpInitCount}" message="perfTest.config.rampUp.initialCount"
                    err_style="margin-left:-125px; width:220px; height:10px"/>
                </div>

                <div class="col-lg-3">
                    <@input_label name="rampUpStep"
                    value="${config.rampUpStep}" message="perfTest.config.rampUp.step"
                    err_style="margin-left:-125px; width:220px; height:10px"/>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-3">
                    <@input_label name="rampUpInitSleepTime"
                    value="${config.rampUpInitSleepTime}"
                    message="perfTest.config.rampUp.initialSleepTime" others="<code>MS</code>"
                    err_style="margin-left:-125px; width:220px; height:10px"/>
                </div>
                <div class="col-lg-3">
                    <@input_label name="rampUpIncrementInterval"
                    value="${config.rampUpIncrementInterval}"
                    message="perfTest.config.rampUp.incrementInterval" others="<code>MS</code>"
                    err_style="margin-left:-125px; width:220px; height:10px"/>
                </div>
            </div>
        </div>
    </div>
    <legend class="center" style="margin-top:0;padding-top:0"> <@spring.message "perfTest.config.rampUp.des"/></legend>
    <div id="ramp_up_chart" class="ramp_up_chart" style="margin-left: 20px"></div>
</div>
<!-- end test content right -->
</div>


<script>
// vuser calc
${(vuserCalcScript)!};

var objTimer;
var durationMap = [];

$(document).ready(function () {
	$.ajaxSetup({
		cache : false //close AJAX cache
	});
	//initTags()
	initDuration();
	initScheduleDate();
	$("#sample_tab").find("a:first").tab('show');
	$("#test_config_section_tab").find("a").tab('show');

	addValidation();
	bindEvent();
	updateScript();
	updateTotalVuser();
	updateRampUpChart();

	displayConfigOnly();


});

/*function formatTags(e) {
	if (e.added && (e.added.id.indexOf(",") >= 0 || e.added.id.indexOf(" ") >= 0)) {
		var tagControl = $("#tag_string");
		var values = tagControl.select2("val");
		var newValues = [];
		for (var i = 0; i < values.length; i++) {
			var splitted = values[i].split(/[\s,]+/);
			for (var j = 0; j < splitted.length; j++) {
				newValues.push(splitted[j].replace("q_", ""));
			}
		}

		tagControl.select2("val", newValues);
	}
}*/

/*function initTags() {
	$("#tag_string").select2({
		tokenSeparators: [",", " "],
		tags:[""],
		placeholder: '<@spring.message "perfTest.config.tagInput"/>',
		initSelection : function (element, callback) {
			var data = [];
			$(element.val().split(",")).each(function () {
				if (this.indexOf("q_") !== 0) {
					data.push({id: "q_" + this, text: this});
				}
			});
			callback(data);
		},
		maximumSelectionSize: 5,
		query: function(query) {
			var data = {results:[]};
			var ajaxObj = new AjaxPostObj("/perftest/search_tag", {'query' : query.term});
			ajaxObj.success = function(res) {
				for (var i = 0; i < res.length; i++) {
					data.results.push({id:"q_" + res[i], text:res[i]});
				}
				query.callback(data);
			};
			ajaxObj.call();
		}
	}).change(formatTags);

	$("#script_name").select2({
		placeholder: '<@spring.message "perfTest.config.scriptInput"/>'
	});
}*/

function initScheduleDate() {
	var date = getBrowserTimeApplyingTimezone();
	var year = date.getFullYear();
	var month = date.getMonth() + 1;
	var day = date.getDate();
	$("#scheduled_date").val(year + "-" + (month < 10 ? "0" + month : month) + "-" + (day < 10 ? "0" + day : day));

	$('#scheduled_date').datepicker({
		format : 'yyyy-mm-dd'
	});

	$("#scheduled_hour").append(getOption(24));
	$("#scheduled_min").append(getOption(60));
}

function initDuration() {
	var sliderMax = 1000;
	durationMap[0] = 0;

	for ( var i = 1; i <= sliderMax; i++) {
		if (i <= 10) {
			durationMap[i] = durationMap[i - 1] + 1;
		} else if (i <= 20) {
			durationMap[i] = durationMap[i - 1] + 5;
		} else if (i <= 32) { //until 180 min
			durationMap[i] = durationMap[i - 1] + 10;
		} else if (i <= 38) { //360 min
			durationMap[i] = durationMap[i - 1] + 30;
		} else if (i <= 56) { //24 hours
			durationMap[i] = durationMap[i - 1] + 60;
		} else if (i <= 72) {
			durationMap[i] = durationMap[i - 1] + 60 * 6;
		} else if (i <= 78) {
			durationMap[i] = durationMap[i - 1] + 60 * 12;
		} else {
			durationMap[i] = durationMap[i - 1] + 60 * 24;
		}
		if ((durationMap[i]/60) >= ${maxRunHour}) {
			 sliderMax = i;
			 durationMap[i] = (${maxRunHour} - 1) * 60;
			 break;
		}
	}

	var durationVal = $("#duration").val();
    var $hiddenDurationInput = $("#hidden_duration_input");
    $hiddenDurationInput.attr("data-slider", "#duration_slider");
	for (i = 0; i <= sliderMax; i++) {
		if (durationMap[i] * 60000 >= durationVal) {
			$hiddenDurationInput.attr("value", i);
			break;
		}
		if (i == sliderMax) {
			$hiddenDurationInput.attr("value", sliderMax);
		}
	}
	$hiddenDurationInput.slider(
			{
				max:sliderMax,
				min:1,
				template:
					"<div class='input-slider' style='width:255px'>" +
					"<div class='input-slider-knob js-slider-knob'></div>" +
					"</div>"
			});

	var durationHour = parseInt(durationVal / 3600000) + 1;
	var durationMaxHour = durationHour > ${maxRunHour} ? durationHour : ${maxRunHour};
    var $selectHour = $("#select_hour");
    var $selectSec = $("#select_sec");
    var $selectMin = $("#select_min");
    $selectHour.append(getOption(durationMaxHour));
    $selectHour.change(getDurationMS);
    $selectMin.append(getOption(60));
	$selectMin.change(getDurationMS);
    $selectSec.append(getOption(60));
	$selectSec.change(getDurationMS);
	setDuration();
	setDurationHour(durationVal);
}

var validationOptions = {};
function addValidation() {
	$.validator.addMethod("paramFmt", function (param) {
		var rule = /^[a-zA-Z0-9_\.,\|=]{0,50}$/;
		return rule.test($.trim(param));
	});
	var $runCountRadio = $("#run_count_radio");
	$.validator.addMethod("runCount", function(value, element) {
		if ($runCountRadio.is(":checked")) {
			return value > 0;
		} else {
			return true;
		}
	});
    //noinspection JSUnusedLocalSymbols,JSUnusedLocalSymbols
    validationOptions = {
		rules: {
			testName: {
				required: true
			},
			agentCount: {
				required: true,
				digits: true,
				min: 0
			},
			<#if clustered>
			region : {
				required: true
			},
			</#if>
			vuserPerAgent: {
				required: true,
				digits: true,
				range: [1, ${(maxVuserPerAgent)}]
			},
			scriptName: {
				required: true
			},
			durationHour: {
				max: ${maxRunHour}
			},
			ignoreSampleCount: {
				required: false,
				digits: true,
				min: 0
			},
			<#if securityMode?? && securityMode == true>
			targetHosts: {
				required: true
			},
			</#if>
			initProcesses: {
				required: true,
				digits: true
			},
			initSleepTime: {
				required: true,
				digits: true
			},
			processIncrement: {
				required: true,
				digits: true,
				min: 1
			},
			processIncrementInterval: {
				required: true,
				digits: true,
				min: 1
			},
			runCount: {
				digits: true,
				max: '${maxRunCount}',
				runCount: true
			},
			param : {
				required:false,
				paramFmt:true
			}
		},
		messages: {
			testName: {
				required: "<@spring.message 'perfTest.message.testName'/>"
			},
		<#if clustered>
			region : {
				required: "<@spring.message 'perfTest.message.region'/>"
			},
		</#if>
			agentCount: {
				required: "<@spring.message 'perfTest.message.agentNumber'/>"
			},
			vuserPerAgent: {
				required: "<@spring.message 'perfTest.message.vuserPerAgent'/>"
			},
			scriptName: {
				required: "<@spring.message 'perfTest.message.script'/>"
			},
			durationHour: {
				max: "<@spring.message 'perfTest.message.duration.maxHour'/>"
			},
			runCount: {
				required: "<@spring.message 'perfTest.message.runCount'/>",
				runCount: "<@spring.message 'perfTest.message.runCount'/>"
			},
			processes: {
				required: "<@spring.message 'perfTest.message.processes'/>"
			},
			threads: {
				required: "<@spring.message 'perfTest.message.threads'/>"
			},
			targetHosts: {
				required: "<@spring.message 'perfTest.message.hostString'/>"
			},
			param : {
				paramFmt: "<@spring.message 'perfTest.message.param'/>"
			}

		},
		ignore : "", // make the validation on hidden input work
		errorClass : "help-inline",
		errorElement : "span",
		errorPlacement : function(error, element) {
			var errorPlace = $("td." + element.attr("id"));
			if (errorPlace[0]) {
				errorPlace.html(error);
				return;
			}
			errorPlace = $("#err_"+element.attr("id"));
			if (errorPlace[0]) {
				errorPlace.html(error);
			} else {
				var $elem = element.closest(".controls");
				if ($elem[0]) {
					$elem.append(error);
				} else {
					element.parent().append(error);
				}
			}
		},
		highlight : function(element, errorClass, validClass) {
			var $detailedSection = $(element).parents("#detail_config_section");
			if ($detailedSection.length >= 1) {
				$detailedSection.show();
			}
			var $controlGroup = $(element).parents('.control-group');
			if ($controlGroup.length >= 1) {
				$($controlGroup[0]).removeClass("success");
				$($controlGroup[0]).addClass("error");
			}
		},
		unhighlight : function(element, errorClass, validClass) {
			var $elem = $(element);
			var $controlGroup = $elem.parents('.control-group');
			if ($controlGroup.length >= 1) {
				var isSuccess = true;
				$elem.siblings("span.help-inline:visible").each(function() {
					if ($(this).attr("for") != $elem.attr("id")) {
						isSuccess = false;
					}
				});
				if (isSuccess) {
					$($controlGroup[0]).removeClass("error");
					$($controlGroup[0]).addClass("success");
				}
			}
		}
	};

	$("#test_config_form").validate(validationOptions);
}

function bindNewScript(target, first) {
	var $showScript = $("#show_script_btn");
	var $scriptRevision = $("#script_revision");
	var oldRevision = $scriptRevision.attr("old_revision");
	if (target.val() == target.attr("old_script") && oldRevision != -1) {
		$showScript.text("R " + oldRevision);
		$scriptRevision.val(oldRevision);
	} else {
		$showScript.text("R HEAD");
		$scriptRevision.val(-1);
	}
	$showScript.show();
	updateScriptResources(first);
	if (target.val() != "") {
		target.valid();
	}
}

function showScheduleModal() {
	initScheduleTime();
	/*$("#tag_string").val(buildTagString());*/
	$('#schedule_modal').modal('show');
}


function getBrowserTimeApplyingTimezone(time) {
	var date = new Date();
	if (time === undefined) {
		return new Date(date.getTime() + (date.getTimezoneOffset() * 60 * 1000) + ${timezone_offset});
	} else {
		date = new Date(time - ${timezone_offset});
		// Now it's browser time reflecting the timezone difference.
		return new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes()));
	}
}


function bindEvent() {
	$("#script_name").change(function() {
		bindNewScript($(this), false);
	});

	$("#hidden_duration_input").bind("slide", function() {
		var maxIndex = durationMap.length - 1;
		var $duration = $("#duration");
		if (maxIndex == this.value) {
			$duration.val((durationMap[maxIndex] + 59) * 60000 + 59000);
		} else {
			$duration.val(durationMap[this.value] * 60000);
		}
		setDuration();
		$("#duration_ratio").click();
	});

	$("#detail_config_section_btn").click(function() {
		if ($("#detail_config_section").is(":hidden")) {
			$("#detail_config_section").show("slow");
		} else {
			$("#detail_config_section").slideUp();
		}
	});

	$("#save_schedule_btn").click(function() {
		$("#agent_count").rules("add", {
			min:1
		});
		if (!validateForm()) {
			return false;
		}
		//noinspection JSUnresolvedVariable
        if (typeof(scheduleTestHook) != "undefined") {
			//noinspection JSUnresolvedFunction
            if (scheduleTestHook()) {
				showScheduleModal();
			}
		} else { //noinspection JSUnresolvedVariable
            if (typeof(scheduleTestUnBlockingHook) != "undefined") {
	            //noinspection JSUnresolvedFunction
                scheduleTestUnBlockingHook(showScheduleModal);
            } else {
	            showScheduleModal();
            }
        }
		return true;
	});


	$("#save_test_btn").click(function() {
		$("#agent_count").rules("add", {
			min:0
		});

		if (!validateForm()) {
			return false;
		}

		$("#test_status").val("SAVED");
		$("#scheduled_time").attr('name', '');
		/*$("#tag_string").val(buildTagString());*/

		return true;
	});

	$("#run_now_btn").click(function() {
        var $scheduleModal = $("#schedule_modal");
        $scheduleModal.modal("hide");
		$scheduleModal.find("small").html("");
		$("#scheduled_time").attr('name', '');
		$("#test_status").val("READY");
		showSuccessMsg("<@spring.message 'perfTest.message.testStart'/>");
		setTimeout(function() {
			document.test_config_form.submit();
		}, 1000);
	});



	$("#add_schedule_btn").click(function() {
        var $scheduleModal = $("#schedule_modal");
        if (checkEmptyByID("scheduled_date")) {
			$scheduleModal.find(".control-group").addClass("error");
			$scheduleModal.find(".help-inline").html("<@spring.message "perfTest.message.setScheduleDate.alert"/>");
			return;
		}

		var timeStr = $("#scheduled_date").val() + " " + $("#scheduled_hour").val() + ":" + $("#scheduled_min").val() + ":0";
		// User input date time.
		var scheduledTime = new Date(timeStr.replace(/-/g, "/"));
		scheduledTime = getBrowserTimeApplyingTimezone(scheduledTime.getTime());
        if (new Date() > scheduledTime) {
			$scheduleModal.find(".control-group").addClass("error");
			$scheduleModal.find(".help-inline").html("<@spring.message "perfTest.message.scheduleDate.error"/>");
			return;
		}
		$scheduleModal.find(".control-group").removeClass("error");
		$("#scheduled_time").val(scheduledTime);
        $scheduleModal.modal("hide");
		$scheduleModal.find("small").html("");
		document.test_config_form.submit();
	});

	$("#run_count_radio").click(function() {
		if ($(this).attr("checked") == "checked") {
			var $runCount = $("#run_count");
			$runCount.rules("add", {
				min:1
			});
			$runCount.valid();

			var $durationHour = $("#duration_hour");
			if (!$durationHour.valid()) {
                var maxVal = 3600000 * ${maxRunHour};
                $("#duration").val(maxVal);
                setDuration();
                //noinspection JSUnusedAssignment
                setDurationHour(maxVal);
			}
			$durationHour.valid();
		}
	});

	$("#duration_ratio").click(function() {
		if ($(this).attr("checked") == "checked") {
            var $duration = $("#duration");
            setDurationHour($duration.val());
			$("#duration_hour").valid();
			$duration.addClass("positiveNumber");
			$duration.valid();

			var $runCount = $("#run_count");
			$runCount.rules("add", {
				min:0
			});
			if (!$runCount.valid()) {
				$runCount.val(0);
			}
			$runCount.valid();
		}
	});

	$("#ignore_sample_count, #run_count").blur(function() {
		if (!($.trim($(this).val()))) {
			$(this).val(0);
		}
	});

	$("#agent_count").change(function() {
		updateTotalVuser();
	});

	$("#threads, #processes").change(function() {
		var $vuser = $("#vuser_per_agent");
		$vuser.val($("#processes").val() * $("#threads").val());
		if ($vuser.valid()) {
			updateVuserGraph();
			updateTotalVuser();
		}
	});

	$("#vuser_per_agent").change(function() {
		var $vuserElement = $(this);
		var processCount = $("#processes").val();
		if ($vuserElement.valid()) {
			var result = updateVuserPolicy($vuserElement.val());
			$(this).val(result[0] * result[1]);
			if (processCount != result[0]) {
				updateVuserGraph();
			}
			updateTotalVuser();
		}
	});

	$("#report_btn").click(function() {
		$("#footer").hide();
		openReportDiv(function() {
			$("#footer").show();
		});
	});

	$("#sample_tab").find("a").click(function(e) {
		e.preventDefault();
		$(this).tab('show');
	});

	$("#show_script_btn").click(function() {
		var currentScript = $("#script_name").val();
		if (currentScript) {
			//noinspection JSUnusedAssignment
            var ownerId = "";
			<@security.authorize ifAnyGranted="A, S">

					ownerId = "&ownerId=${(user.userId)!}";

			</@security.authorize>
			var scriptRevision = $("#script_revision").val();
			var openedWindow = window.open("../script/detail/" + currentScript + "?r=" + scriptRevision + ownerId, "scriptSource");
			openedWindow.focus();
		}
	});

	$("#expand_collapse_btn").click(function() {
		$(this).toggleClass("collapse");
		var $panel = $("#process_thread_config_panel");
		if ($panel.is(":hidden")) {
			$panel.show("slow");
		} else {
			$panel.slideUp();
		}
	});

	$("#select_hour, #select_min, #select_sec").change(function() {
		$("#duration_ratio").click();
	});

	$("#run_count").focus(function() {
		$("#run_count_radio").click();
	});

	$(document).ajaxSend(function(e, xhr, settings) {
		var url = settings.url;
		if ((url.indexOf("resource") > 0 || url.indexOf("script") > 0)) {
			showProgressBar("<@spring.message "perfTest.message.updateResource"/>");
		}
	});
<#if clustered>
	var $region = $("#region");
	$region.select2();
	$region.change(function(){
		changeAgentMaxCount($(this).val(), true);
	});
	changeAgentMaxCount($region.val(), false);
<#else>
	changeAgentMaxCount("NONE", false);
</#if>
}
var agentCountMap = {};
<#list regionAgentCountMap?keys as key>
agentCountMap["${key}"] = ${regionAgentCountMap[key]};
</#list>

function changeAgentMaxCount(region, isValid) {
	var count = agentCountMap[region];

	if (count === undefined) {
		count = 0;
	}
	$("#maxAgentCount").text(count);

	var $agentCountObj = $("#agent_count");
	$agentCountObj.rules("add", {
		max: count
	});

	if (isValid) {
		$agentCountObj.valid();
	}
}

function validateForm() {
	var result = $("#test_config_form").valid();
	if (!result) {
		$("#test_config_section_tab").find("a").tab('show');
	}
	return result;
}

/*function buildTagString() {
	return $.map($("#tag_string").select2("data"), function(obj) {
		return obj.text;
	}).join(",");
}*/

function updateTotalVuser() {
	$("#total_vuser").text($("#agent_count").val() * $("#vuser_per_agent").val());
}

function updateScript() {
	var ajaxObj = new AjaxObj("/perftest/api/script", null, "<@spring.message "common.error.error"/>");
	ajaxObj.params = {
		<@security.authorize ifAnyGranted="A, S">
				'ownerId' : '${user.userId}'
		</@security.authorize>
	};
	ajaxObj.success = function(res) {
		var $scriptSelection = $("#script_name");
		var selectedScript = $scriptSelection.attr("old_script");
		var exists = false;
		for (var i = 0; i < res.length; i++) {
			if (selectedScript == res[i].path) {
				exists = true;
			}
			$scriptSelection.append($("<option value='" + res[i].path + "' revision='" + res[i].revision + "' validated='" + res[i].validated + "'>" + res[i].pathInShort + "</option>"));
		}
		if (exists) {
			$scriptSelection.select2("val", selectedScript);
		} else if (selectedScript) {
			$scriptSelection.append($("<option value='' revision='-1' validated='false'>(deleted)" + selectedScript +"</option>"));
			$scriptSelection.select2("val", "");
		} else {
			$scriptSelection.append($("<option value='' revision='-1' validated='false'>" + selectedScript +"</option>"));
			$scriptSelection.select2("val", "");
		}

		bindNewScript($scriptSelection, true);
	};
	ajaxObj.complete = function() {
		hideProgressBar();
	};

	ajaxObj.call();
}

function updateScriptResources(first) {
	var scriptName = $("#script_name").val();
	if (!scriptName) {
		return;
	}

	var ajaxObj = new AjaxObj("/perftest/api/resource", null, "<@spring.message "common.error.error"/>");
	ajaxObj.params = {
		'scriptPath' : scriptName,
		'r' : $("#script_revision").val(),
		<@security.authorize ifAnyGranted="A, S">
			'ownerId' : '${(user.userId)!}'
		</@security.authorize>
	};
	ajaxObj.success = function(res) {
		var html = "";
		var len = res.resources.length;
		if (first == false) {
			initHosts(res.targetHosts);
		}
		for ( var i = 0; i < len; i++) {
			var value = res.resources[i];
			html = html + "<div class='resource ellipsis' title='" + value + "'>" + value + "</div>";
		}
		$("#script_resources").html(html);
	};
	ajaxObj.complete = function() {
		hideProgressBar();
	};
	ajaxObj.call();
}

function updateVuserPolicy(vuser) {
	var processCount = getProcessCount(vuser);
	var threadCount = getThreadCount(vuser);
	var $processes = $('#processes');
	$processes.val(processCount);
	$processes.valid();
	var threads = $('#threads');
	threads.val(threadCount);
	threads.valid();
	return [ processCount, threadCount ];
}

function updateVuserGraph() {
	//if ramp-up chart is not enabled, update init process count as total
	if ($("#use_ramp_up")[0].checked) {
		updateRampUpChart();
	}
}

function setDuration() {
	var duration = $("#duration").val();
	var durationInSec = parseInt(duration / 1000);
	var durationH = parseInt(durationInSec / 3600);
	var durationM = parseInt((durationInSec % 3600) / 60);
	var durationS = durationInSec % 60;

	$("#select_hour").val(durationH);
	$("#select_min").val(durationM);
	$("#select_sec").val(durationS);
}

function getDurationMS() {
	var durationH = parseInt($("#select_hour").val());
	var durationM = parseInt($("#select_min").val());
	var durationS = parseInt($("#select_sec").val());
	var durationMs = (durationS + durationM * 60 + durationH * 3600) * 1000;
	var $durationObj = $("#duration");
	$durationObj.val(durationMs);
	$durationObj.valid(); //trigger validation
	return durationMs;
}

function getOption(cnt) {
	var contents = [];
	for (var i = 0; i < cnt; i++) {
		contents.push("<option value='" + i + "'>" + (i < 10 && cnt > 9 ? "0" + i : i) + "</option>");
	}
	return contents.join("\n");
}


//noinspection JSUnusedLocalSymbols
function updateStatus(id, statusType, statusName, icon, deletable, stoppable, message) {
	var $testStatusImg = $("#test_status_img");
	if ($testStatusImg.attr("data-content") != message) {
		$testStatusImg.attr("data-content", message);
	}
	var $testStatusType = $("#test_status_type");
	if ($testStatusType.val() == statusType) {
		return;
	}
	var testStatusImgPopover = $testStatusImg.data('popover');
	$testStatusImg.attr("data-original-title", statusName);
	testStatusImgPopover.options.content = message;
	$testStatusType.val(statusType);

	if ($testStatusImg.attr("src") != "../img/ball/" + icon) {
		$testStatusImg.attr("src", "../img/ball/" + icon);
	}
	if (isRunningStatusType(statusType)) {
		displayConfigAndRunningSection();
	} else if (isFinishedStatusType(statusType)) {
		finished = true;
		// Wait and run because it takes time to transfer logs.
		setTimeout('displayConfigAndReportSection()', 3000);
	} else {
		displayConfigOnly();
	}
}

var finished = false;

// Wrap this function in a closure so we don't pollute the namespace
function displayConfigOnly() {
    $("#test_config_section_tab").find("a").tab('show');
    $("#running_section_tab").hide();
    $("#report_section_tab").hide();
}


var samplingInterval = 1;


var $reportSectionTab = $("#report_section_tab");
var $runningSectionTab = $("#running_section_tab");
function displayConfigAndRunningSection() {
    $runningSectionTab.show();
    $runningSectionTab.find("a").tab('show');
    $("#running_section").show();
    $("#report_section_tab").hide();
    openRunningDiv(function() {
		$("#foot_div").show();
	});
}

function displayConfigAndReportSection() {
    $("#foot_div").hide();
    $("#running_section_tab").hide();
    $reportSectionTab.show();
	$reportSectionTab.find("a").tab('show');
	openReportDiv(function() {
		$("#foot_div").show();
	});
}

function initScheduleTime() {
	var date = getBrowserTimeApplyingTimezone();
	$("#scheduled_hour").val(date.getHours());
	$("#scheduled_min").val(date.getMinutes());
}

function setDurationHour(durationVal) {
	var durationHour = parseInt(durationVal / 3600000);
	durationHour = durationVal % 3600000 == 0 ? durationHour : durationHour + 1;
	$("#duration_hour").val(durationHour);
}

</script>